in sqlalchemy, there is limitation,
we cant modify tables, its does allow us to make new column, delete columns, add fk contraint

sqlalchemy check the table if table with that same name then it will not create  new table.


for this solution is:-
alembic---- This is Database Migrations
pip install alembic

for downgrade the first revision
alembic downgrade base

for creting new revision 
alembic revision -m "message"

for autogenerate table in alembic
alembic revision --autogenerate -m "auto-vote"

Developers can track changes to code and rollback code easily with git. Why cant we do the same for database models/tables.
Database migrations allow us to incrementally track changes to database schma and rollback changes to any point in time.
We will use a toll called Alembic to makes changes to our database.
Alembic can also automatically pull database models from Sqlachemy and generate the proper tables.

Version folder store all revision
in upgrade function any command for create table
in downgrade fuction any command for rollback



For changing postgres password first login with username and old password in psql
then type \password
write new password
and re enter this will change your password.

Alembic
alembic heads
gives current revision id :- first revision
alembic current:- gives old revision id
alembic upgrade revision id or heads   --> for upgrade revision we need current revision id
alembic downgrade revisionid or we can add -1/-2 for rollback that revision back ---> we need downrevisionID

boolean for query

migration = bool(db.query(MigratePlanModel).filter(MigratePlanModel.UUID == migration_plan_id).first())
print(int(migration))    1 and 0 will we get


api request from chrome(google.com)

goto console through inspect

fetch('http://localhost:8000/').then(res => res.json()).then(console.log)

CORS Policy:-
-----------

Cross Origin Resource Sharing(CORS) allows you to make rquests from a web browser on one domain to a servr on different domain.
By default our API will only allow web browsers running on the same domain as our server to make requests to it.



app.add_middleware(CORSMiddleware,
allow_origins=["*"] / origin,
allow_credentials=True,
allow_methods=["*"],
allow_headers=["*"]
)